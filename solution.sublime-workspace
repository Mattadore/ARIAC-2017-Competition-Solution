{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"obje",
				"object_manager"
			],
			[
				"REG",
				"REGION_BIN_GRAB"
			],
			[
				"add_ac",
				"add_actions"
			],
			[
				"wait",
				"wait_until_planned"
			],
			[
				"wait_",
				"wait_until_executed"
			],
			[
				"stand",
				"standard_actions"
			],
			[
				"push",
				"push_back\tvoid push_back(value_type &&__x)"
			],
			[
				"retrac",
				"retract_action"
			],
			[
				"last",
				"last_action"
			],
			[
				"arm_",
				"arm_action\tarm_action"
			],
			[
				"regio",
				"region_"
			],
			[
				"wait_unt",
				"wait_until_executed"
			],
			[
				"move_to",
				"move_to_tray\tarm_action::Ptr move_to_tray"
			],
			[
				"u",
				"use_conveyor\tbool use_conveyor"
			],
			[
				"use",
				"use_trash\tbool use_trash"
			],
			[
				"get_a",
				"get_tray_pose"
			],
			[
				"data",
				"data_in"
			],
			[
				"b",
				"back\treference back()"
			],
			[
				"grab_",
				"grab_action\tarm_action::Ptr grab_action"
			],
			[
				"arm",
				"arm_action\tarm_action"
			],
			[
				"Compe",
				"CompetitionInterface\tCompetitionInterface"
			],
			[
				"AGV",
				"AGV1_callback\tvoid AGV1_callback(const std_msgs::String::ConstPtr msg)"
			],
			[
				"AGV_st",
				"AGV_status_lookup"
			],
			[
				"AGV_sta",
				"AGV_status_lookup\tstd::map<std::string, char> AGV_status_lookup"
			],
			[
				"c",
				"competition_solution"
			],
			[
				"Jo",
				"JointTrajectoryPoint_\tJointTrajectoryPoint_<class ContainerAllocator>"
			],
			[
				"joint",
				"joint_trajectory"
			],
			[
				"p",
				"plan"
			],
			[
				"vacu",
				"vacuum_enabled_end"
			],
			[
				"pipe",
				"pipeline_data"
			],
			[
				"pipeline",
				"pipeline_data\tpipeline_data"
			],
			[
				"acti",
				"action_name"
			],
			[
				"traject",
				"trajectory_end"
			],
			[
				"waiut",
				"wait_until_planned"
			],
			[
				"transiti",
				"transition_delay"
			],
			[
				"pla",
				"plan\tmoveit::planning_interface::MoveGroup::Plan * plan"
			],
			[
				"emp",
				"empty\tbool empty() const"
			],
			[
				"vel",
				"velocities"
			],
			[
				"curre",
				"current_velocity"
			],
			[
				"wait_until",
				"wait_until_planned"
			],
			[
				"pl",
				"plan\tmoveit::planning_interface::MoveGroup::Plan * plan"
			],
			[
				"ve",
				"velocities\t_velocities_type velocities"
			],
			[
				"pull",
				"pull_pose"
			],
			[
				"e",
				"end_delay\tdouble end_delay"
			],
			[
				"g",
				"get_grab_pose\ttf::Pose get_grab_pose(std::string part_name)"
			],
			[
				"get",
				"get_state\tunsigned char get_state(unsigned char index)"
			],
			[
				"currently",
				"currently_executing"
			],
			[
				"curren",
				"currently_executing"
			],
			[
				"Po",
				"Pose\tPose"
			],
			[
				"inte",
				"intermediate_action\tarm_action intermediate_action"
			],
			[
				"inter",
				"intermediate_plan"
			],
			[
				"int",
				"intermediate_plan"
			],
			[
				"intermed",
				"intermediate_points"
			],
			[
				"joi",
				"joint_trajectory"
			],
			[
				"pu",
				"push_back\tvoid push_back(value_type &&__x)"
			],
			[
				"ms",
				"_mm_srli_si128\t_mm_srli_si128(a, count)"
			],
			[
				"JointTrajectoryP",
				"JointTrajectoryPoint\tJointTrajectoryPoint"
			],
			[
				"trans",
				"transform_out\ttf::StampedTransform transform_out"
			],
			[
				"NE",
				"BOOST_NOEXCEPT_EXPR\tBOOST_NOEXCEPT_EXPR(Expression)"
			],
			[
				"velo",
				"velocity"
			],
			[
				"retr",
				"retract_action"
			],
			[
				"next",
				"nexttowardf\tfloat nexttowardf(float __x, long double __y)"
			],
			[
				"na",
				"names"
			],
			[
				"time",
				"time_from_start"
			],
			[
				"tr",
				"trajectory_end\tint trajectory_end"
			],
			[
				"relat",
				"relative_motion\tint relative_motion"
			],
			[
				"node",
				"nodeptr"
			],
			[
				"ali",
				"align_action\tarm_action * align_action"
			],
			[
				"St",
				"StampedTransform"
			],
			[
				"plan",
				"planning_status\tchar planning_status"
			],
			[
				"add_",
				"add_action"
			],
			[
				"po",
				"points"
			],
			[
				"traj",
				"joint_trajectory"
			],
			[
				"wait_un",
				"wait_until_planned"
			],
			[
				"part_wa",
				"part_wait_rate"
			],
			[
				"to",
				"toSec\tdouble DurationBase<Duration>::toSec() const"
			],
			[
				"act",
				"action_name\tstd::string action_name"
			],
			[
				"trajecto",
				"trajectory_msgs\ttrajectory_msgs::"
			],
			[
				"movie",
				"moveit_msgs\tmoveit_msgs::"
			],
			[
				"w",
				"wait_until_executed"
			],
			[
				"gra",
				"grab_pose\ttf::Pose grab_pose"
			],
			[
				"Stamped",
				"StampedTransform\tStampedTransform"
			],
			[
				"tf_",
				"tf_frequency"
			],
			[
				"cur",
				"current_transform"
			],
			[
				"Sam",
				"StampedTransform\tStampedTransform"
			],
			[
				"resul",
				"result_v\ttf::Vector3 result_v"
			],
			[
				"average_list_s",
				"average_list_size"
			],
			[
				"avera",
				"average_list_position_size"
			],
			[
				"av",
				"average_list_valid\tunsigned char average_list_valid"
			],
			[
				"get_cur",
				"get_current_location\ttf::StampedTransform get_current_location()"
			],
			[
				"ref",
				"reference_frame"
			],
			[
				"resu",
				"result_v\ttf::Vector3 result_v"
			],
			[
				"on",
				"on_exit\tint on_exit(void (*__func)(int, void *), void *__arg)"
			],
			[
				"obj",
				"object_true_location"
			],
			[
				"true_",
				"true_top_from_tf\tdouble true_top_from_tf"
			],
			[
				"offs",
				"offset_pose"
			],
			[
				"QU",
				"Quaternion\tQuaternion"
			],
			[
				"ge",
				"get_type_info\tObjectTypeData * get_type_info()"
			],
			[
				"ObJ",
				"ObjectTypeData\tObjectTypeData"
			],
			[
				"par",
				"part_to_grab\tObjectData & part_to_grab"
			],
			[
				"mi",
				"min\tconst _Tp & min(const _Tp &, const _Tp &)"
			],
			[
				"old",
				"old_vector"
			],
			[
				"res",
				"result_v"
			],
			[
				"ave",
				"average_list_size\tunsigned char average_list_size"
			],
			[
				"aver",
				"average_list_valid"
			],
			[
				"Sta",
				"StampedTransform\tStampedTransform"
			],
			[
				"get_",
				"get_current_location"
			],
			[
				"look",
				"lookup_map"
			],
			[
				"ad",
				"advertise\tros::Publisher advertise<class M>(const std::string &topic, uint32_t queue_size)"
			],
			[
				"tra",
				"transforms"
			],
			[
				"tf2_",
				"tf2_msgs\ttf2_msgs::"
			],
			[
				"Obj",
				"ObjectTracker"
			],
			[
				"S",
				"StampedTransform"
			],
			[
				"pose",
				"poseStampedMsgToTF\tvoid poseStampedMsgToTF(const geometry_msgs::PoseStamped &msg, Stamped<Pose> &bt)"
			],
			[
				"type",
				"type_data"
			],
			[
				"max",
				"max_average_num"
			],
			[
				"cal",
				"calculate"
			],
			[
				"initia",
				"initialize_object_types"
			],
			[
				"Object",
				"ObjectTracker"
			],
			[
				"Ob",
				"ObjectTracker"
			],
			[
				"paren",
				"parent_action"
			],
			[
				"vector",
				"transform_from_vector"
			],
			[
				"chec",
				"check_order"
			],
			[
				"tray_of",
				"tray_offset"
			],
			[
				"drop",
				"drop_offset"
			],
			[
				"gene",
				"generate_intermediate"
			],
			[
				"V",
				"Vector3"
			],
			[
				"add_pl",
				"add_plans"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/solution_node.cpp",
			"settings":
			{
				"buffer_size": 30809,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/Catkin.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/Catkin.sublime-build",
					""
				]
			],
			[
				"Packages/User/Catkin.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 353.0,
		"last_filter": "packa",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"boxy",
				"Boxy Theme: Configuration"
			],
			[
				"easy",
				"EasyClangComplete: Clean current CMake cache"
			]
		],
		"width": 458.0
	},
	"console":
	{
		"height": 588.0,
		"history":
		[
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/matt/ariac_ws/src/competition_solution",
		"/home/matt/ariac_ws/src/competition_solution/config",
		"/home/matt/ariac_ws/src/competition_solution/include",
		"/home/matt/ariac_ws/src/competition_solution/launch",
		"/home/matt/ariac_ws/src/competition_solution/src"
	],
	"file_history":
	[
		"/home/matt/ariac_ws/src/competition_solution/include/utility.h",
		"/home/matt/ariac_ws/src/competition_solution/include/utiluty.h",
		"/home/matt/ariac_ws/src/competition_solution/include/object_manager.h",
		"/home/matt/ariac_ws/src/competition_solution/CMakeLists.txt",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/CMakeLists.txt",
		"/home/matt/ariac_ws/src/CMakeLists.txt",
		"/home/matt/ariac_ws/src/competition_solution/solution.sublime-",
		"/home/matt/ariac_ws/src/universal_robot/ur_driver/src/ur_driver/driver.py",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/ROSAGVPlugin.cc",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/ConveyorBeltPlugin.cc",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/worlds/gear.world.template",
		"/home/matt/ariac_ws/src/competition_solution/config/gear_configuration.yaml",
		"/home/matt/ariac_ws/src/start_sim_qual2",
		"/home/matt/ariac_ws/src/competition_solution/config/test_config.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/custom_config_test.yaml",
		"/home/matt/ariac_ws/src/competition_solution/src/solution_node.cpp",
		"/home/matt/ariac_ws/src/qualifier2_actual/config/gear_configuration.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/testpoint",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/qual3b.yaml",
		"/home/matt/ariac_ws/src/universal_robot/ur_gazebo/launch/ur10.launch",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/qual3a.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/SideContactPlugin.cc",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/example_custom_config.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/sample_user_config.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/launch/linear_arm_actuator/linear_arm_actuator.urdf.xacro",
		"/home/matt/ariac_ws/src/universal_robot/ur10_moveit_config/config/joint_limits.yaml",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/config/joint_limits.yaml",
		"/home/matt/ariac_ws/src/universal_robot/ur10_moveit_config/config/ompl_planning.yaml",
		"/home/matt/ariac_ws/src/universal_robot/ur10_moveit_config/config/ur10.srdf",
		"/home/matt/ariac_ws/src/universal_robot/ur10_moveit_config/ls",
		"/home/matt/ariac_ws/src/universal_robot/ur_description/urdf/ur10_joint_limited_robot.urdf.xacro",
		"/home/matt/ariac_ws/src/universal_robot/ur_description/urdf/ur10.urdf.xacro",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/VacuumGripperPlugin.cc",
		"/home/matt/ariac_ws/src/universal_robot/ur_description/urdf/ur10_robot.urdf.xacro",
		"/home/matt/ariac_ws/src/universal_robot/ur_bringup/launch/ur10_bringup.launch",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/config/kinematics.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/launch/ur10/arm_controller_ur10_custom.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/simple_arm_vacuum_gripper/model.sdf",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/simple_arm_vacuum_gripper/model.config",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/simple_arm_vacuum_gripper/model.",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/warehouse_robot_ariac/model.sdf",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/warehouse_robot_ariac/model.config",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/warehouse_robot_ariac/model.",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/scenes/ariac.scene",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/rviz/ariac.rviz",
		"/opt/ros/indigo/lib/python2.7/dist-packages/roslaunch/nodeprocess.py",
		"/opt/ros/indigo/include/std_msgs/Float64MultiArray.h",
		"/opt/ros/indigo/include/std_msgs/Float64.h",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/include/ConveyorBeltPlugin.hh",
		"/home/matt/ariac_ws/src/competition_solution/package.xml",
		"/home/matt/Desktop/pseudocode",
		"/home/matt/ariac_ws/src/moveit_start",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/qual2a.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/qual1a.yaml",
		"/opt/ros/indigo/share/moveit_msgs/msg/RobotTrajectory.msg",
		"/home/matt/ariac_ws/src/static_info",
		"/home/matt/ariac_ws/src/competition_solution/include/advanced_publisher.h",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/msg/PopulationState.msg",
		"/home/matt/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/matt/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/PopulationPlugin.cc",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/include/osrf_gear/ARIAC.hh",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/script/gear.py",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/ROSPopulationPlugin.cc",
		"/home/matt/ariac_ws/src/competition_solution/src/advanced_publisher.cpp",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/part1_ariac/model.sdf",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/part1_ariac/model.config",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/part1_ariac/model.",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/comp_conf2.yaml",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/config/sample.yaml",
		"/home/matt/ariac_ws/src/qualifier2_actual/src/qual2_actual_node.cpp",
		"/home/matt/ariac_ws/src/competition_solution/include",
		"/home/matt/ariac_ws/src/competition_solution/src/qual2_node.cpp",
		"/home/matt/ariac_ws/src/competition_solution/src/CMakeLists.txt",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/part4/model.sdf",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/part4_ariac/model.sdf",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/part4_ariac/model.",
		"/home/matt/ariac_ws/src/qualifier2_solution/src/advanced_publisher.cpp",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/script/startup.sh",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/pulley_part_ariac/model.sdf",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/models/piston_rod_part_ariac/model.sdf",
		"/home/matt/ariac_ws/src/qualifier2_solution/config/gear_configuration.yaml",
		"/home/matt/ariac_ws/src/qualifier2_solution/src/qual2_node.cpp",
		"/home/matt/qual3_sub/b/log/performance.log",
		"/home/matt/ariac_ws/src/competition_example/config/sampe",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/gear_part/model.sdf",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/piston_rod_part/model.sdf",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/piston_rod_part_ariac/model.sdf",
		"/home/matt/ariac_ws/src/nistinfo.txt",
		"/home/matt/ariac_ws/install/share/ur_gazebo/controller/arm_controller_ur10.yaml",
		"/home/matt/ariac_ws/install/share/osrf_gear/vendor/ur_description/urdf/ur10.urdf.xacro",
		"/home/matt/ariac_ws/install/share/osrf_gear/launch/ur10/ur10.urdf.xacro",
		"/home/matt/ariac_ws/src/start_sim2",
		"/home/matt/ariac_ws/src/qualifier2_solution/CMakeLists.txt",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/src/ROSAriacTaskManagerPlugin.cc",
		"/home/matt/ariac_ws/install/share/osrf_gear/launch/ur10/ur10.xml",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/launch/ur10_moveit_planning_execution.launch",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/launch/move_group.launch",
		"/home/matt/ariac_ws/install/share/ur_gazebo/launch/ur10.launch",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/config/ompl_planning.yaml",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/config/controllers.yaml",
		"/home/matt/ariac_ws/install/share/ur10_moveit_config/config/ur10.srdf",
		"/home/matt/ariac_ws/install/share/osrf_gear/vendor/ur_description/urdf/ur.transmission.xacro",
		"/tmp/ariac/gear.launch",
		"/tmp/ariac/gear.",
		"/home/matt/ariac_ws/install/share/ur_gazebo/launch/ur10_joint_limited.launch",
		"/home/matt/ariac_ws/install/share/osrf_gear/models/piston_rod_part_ariac/model.config",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/qual2a.yaml",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/qual2b.yaml",
		"/home/matt/ariac_qual2/my_team.txt",
		"/home/matt/ariac_ws/src/gdb_competition",
		"/home/matt/ariac_ws/src/qualifier2_actual_solution/CMakeLists.txt",
		"/home/matt/ariac_ws/src/qualifier2_actual/scenes/ariac.scene",
		"/home/matt/.ariac/log/gazebo/state.log",
		"/home/matt/ariac_ws/src/start_sim_q",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/drop_test.yaml",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/comp_conf2.yaml",
		"/home/matt/ariac_ws/src/qualifier2_solution/package.xml",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/qual1a.yaml",
		"/home/matt/ariac_ws/src/competition_example/src/competition_example_node.cpp",
		"/home/matt/ariac_ws/src/qualifier2_actual_solution/package.xml",
		"/home/matt/ariac_ws/src/qualifier2_actual_solution/Cm",
		"/home/matt/ariac_ws/src/ariac/ariac_example/src/ariac_example_node.cpp",
		"/home/matt/ariac_ws/src/ariac/osrf_gear/include/osrf_gear/ROSVacuumGripperPlugin.hh",
		"/home/matt/ariac_ws/src/qualifier2_solution/include/controller.h",
		"/home/matt/Desktop/teststuff.txt",
		"/home/matt/ariac_ws/install/share/osrf_gear/config/comp_conf1.yaml",
		"/home/matt/.bashrc"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"float64",
			"AGV_meta",
			"constrain",
			"make_constraint",
			"catkin_package",
			"include",
			"SQUARE",
			"kit_Tally",
			"planner",
			"number_orders",
			"vector",
			"new_region",
			"execute\\(",
			" we ",
			"pullup_",
			"static",
			"vacuum_enabled",
			"vacuum_enabled_end",
			"POSITIVE_INTERMEDIATE",
			"NEGATIVE_INTERMEDIATE",
			"negative_intermed",
			"joints",
			"start_competition",
			"within_toler",
			"toleran",
			"todo",
			"agv_status",
			"AGV_base",
			"agv_info",
			"callback",
			"todo",
			"arm_control",
			"\t\t\t",
			"TODO",
			"todo",
			"world",
			"frame",
			"_frame",
			"frame",
			"logical.camera",
			"camera",
			"faul",
			"gazebo",
			"belt",
			":\n",
			"belt",
			"result_v",
			"filter",
			"conveyor",
			"timing",
			"acceleration",
			"has_acceleration_limits: true",
			"velocity",
			"control_msg",
			"joint_con",
			"get_tra",
			"jointtrajectorypoint",
			"  ",
			"plan_interm",
			"use_intermediate",
			"intermediate",
			"delete",
			"use_intermed",
			"arm_trans",
			"static",
			"type_data",
			"pipeline_data",
			"while",
			"NULL",
			"bind",
			"OCELOT",
			"&",
			"&&",
			"&",
			"arm_action\\s?\\*",
			"arm_action",
			"move",
			"execute",
			"2.0",
			"5.0",
			"velocity",
			"grab_action",
			"0.1",
			"\\>.*?0",
			"2.0",
			"plan\\(",
			"for",
			"end_delay",
			"end_Delay",
			"end_Delayt",
			"toggle attempted",
			"grab_action",
			"plan\\(",
			"planner",
			"get_state",
			"move",
			"0.4",
			"arm_trans",
			"jointmsg",
			"parent\\s+=",
			"NEGATIVE",
			";\n",
			"vector",
			"controller",
			"competitioninterf",
			"include",
			"ei",
			"controller",
			"move",
			"void void",
			"void voif",
			"void void",
			"execute_",
			"toggle_",
			"vacuum_gripper",
			"vacuum_enabled",
			"dist",
			"0.2",
			"vacuum",
			"vacuum_gripper",
			"1.5",
			"kMaxBeltLinVel",
			"beltVeloc",
			"0.2",
			"arm_location",
			"execute_",
			"generic_state",
			"start_state"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"vacuum_enabled",
			"POSITIVE_CONFIGURATION",
			"NEGATIVE_CONFIGURATION",
			"AGV_status",
			"nullptr",
			"&&",
			"",
			"OCELOT",
			"",
			"arm_action::Ptr",
			"result_p",
			"handle_transform",
			"$1",
			"reference_frame",
			"StampedTransform",
			"TransformStamped",
			"nodeptr",
			"currently_executing",
			"execution",
			"\t",
			"control_thread",
			"control_queue",
			"move_queue",
			"action_queue",
			"",
			"subscribe($1, $2, &$3);",
			"subscribers[$1] = subscribe($1, $2, &$3);",
			"subscribers[$1] = subscribe($1 ,$2 ,&$3);",
			"subscribers[$1] = subscribe($1,$2,&$3);",
			"subscribers[$1] = subscribe($1,$2,$3);",
			"PULLUP_PLAN",
			"grab_frame_",
			"state_",
			"$1\t",
			"\t"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/solution_node.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30809,
						"regions":
						{
						},
						"selection":
						[
							[
								15742,
								15742
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4504.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.cc":
	{
		"height": 187.0
	},
	"output.exec":
	{
		"height": 193.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 499.0
	},
	"pinned_build_system": "Packages/User/Catkin.sublime-build",
	"project": "solution.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"solutionnn",
				"~/ariac_ws/src/competition_solution/src/solution_node.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 148.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
